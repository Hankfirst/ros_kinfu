diff --git a/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/cyclical_buffer.h b/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/cyclical_buffer.h
index 8b51fbb..ea86056 100644
--- a/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/cyclical_buffer.h
+++ b/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/cyclical_buffer.h
@@ -49,7 +49,6 @@
 
 #include <pcl/gpu/kinfu_large_scale/world_model.h>
 
-
 #include <pcl/io/pcd_io.h>
 namespace pcl
 {
@@ -65,7 +64,22 @@ namespace pcl
       class PCL_EXPORTS CyclicalBuffer
       {
         public:
-        
+
+          class WeightCubeListener
+          {
+            public:
+            typedef std::vector<short> WeightVector;
+            typedef boost::shared_ptr<WeightVector> WeightVectorPtr;
+            typedef boost::shared_ptr<WeightCubeListener> Ptr;
+
+            // empty virtual constructor to avoid memory leaks
+            virtual ~WeightCubeListener() {}
+
+            virtual void onNewCube(const WeightVectorPtr weights,Eigen::Vector3f cube_size,Eigen::Vector3i nb_voxels,
+              Eigen::Vector3i cyclical_shifted_origin,Eigen::Vector3i grid_origin) = 0;
+
+            virtual void onReset() = 0;
+          };
           
           /** \brief Constructor for a cubic CyclicalBuffer.
             * \param[in] distance_threshold distance between cube center and target point at which we decide to shift.
@@ -81,6 +95,7 @@ namespace pcl
             buffer_.voxels_size.x = nb_voxels_per_axis; 
             buffer_.voxels_size.y = nb_voxels_per_axis; 
             buffer_.voxels_size.z = nb_voxels_per_axis; 
+            extract_known_points_ = false;
           }
 
 
@@ -93,7 +108,8 @@ namespace pcl
             * \param[in] nb_voxels_y number of voxels for Y axis of the volume represented by the TSDF buffer.
             * \param[in] nb_voxels_z number of voxels for Z axis of the volume represented by the TSDF buffer.
             */
-          CyclicalBuffer (const double distance_threshold, const double volume_size_x, const double volume_size_y, const double volume_size_z, const int nb_voxels_x, const int nb_voxels_y, const int nb_voxels_z)
+          CyclicalBuffer (const double distance_threshold, const double volume_size_x, const double volume_size_y,
+            const double volume_size_z, const int nb_voxels_x, const int nb_voxels_y, const int nb_voxels_z)
           {
             distance_threshold_ = distance_threshold;
             buffer_.volume_size.x = volume_size_x; 
@@ -102,6 +118,7 @@ namespace pcl
             buffer_.voxels_size.x = nb_voxels_x; 
             buffer_.voxels_size.y = nb_voxels_y; 
             buffer_.voxels_size.z = nb_voxels_z; 
+            extract_known_points_ = false;
           }
 
           /** \brief Check if shifting needs to be performed, returns true if so.
@@ -198,6 +215,8 @@ namespace pcl
             buffer_.origin_GRID.x = 0; buffer_.origin_GRID.y = 0; buffer_.origin_GRID.z = 0;
             buffer_.origin_GRID_global.x = 0.f; buffer_.origin_GRID_global.y = 0.f; buffer_.origin_GRID_global.z = 0.f;
             buffer_.origin_metric.x = 0.f; buffer_.origin_metric.y = 0.f; buffer_.origin_metric.z = 0.f;
+            if (weight_cube_listener_)
+              weight_cube_listener_->onReset();
             initBuffer (tsdf_volume);
           }
           
@@ -208,8 +227,17 @@ namespace pcl
           {
             return (&world_model_);
           }
-                
-          
+
+          void setWeightCubeListener(WeightCubeListener::Ptr listener)
+          {
+            weight_cube_listener_ = listener;
+          }
+
+          void setExtractKnownPoints(bool e)
+          {
+            extract_known_points_ = e;
+          }
+
         private:
 
           /** \brief buffer used to extract XYZ values from GPU */
@@ -221,11 +249,16 @@ namespace pcl
           /** \brief distance threshold (cube's center to target point) to trigger shift */
           double distance_threshold_;
           
-          /** \brief world model object that maintains the known world */
+          /** \brief world model object that maintains the occupied world */
           pcl::kinfuLS::WorldModel<pcl::PointXYZI> world_model_;
 
+          /** \brief listener that maintains the known world */
+          WeightCubeListener::Ptr weight_cube_listener_;
+
           /** \brief structure that contains all TSDF buffer's addresses */
           tsdf_buffer buffer_;
+
+          bool extract_known_points_;
           
           /** \brief updates cyclical buffer origins given offsets on X, Y and Z
             * \param[in] tsdf_volume pointer to the TSDF volume managed by this cyclical buffer
diff --git a/gpu/kinfu_large_scale/src/cyclical_buffer.cpp b/gpu/kinfu_large_scale/src/cyclical_buffer.cpp
index 26d5ba6..ab542f3 100644
--- a/gpu/kinfu_large_scale/src/cyclical_buffer.cpp
+++ b/gpu/kinfu_large_scale/src/cyclical_buffer.cpp
@@ -122,6 +122,25 @@ pcl::gpu::kinfuLS::CyclicalBuffer::performShift (const TsdfVolume::Ptr volume, c
   current_slice->width = (int) current_slice->points.size ();
   current_slice->height = 1;
 
+  // save the known points
+  if (extract_known_points_)
+  {
+    // download weights
+    WeightCubeListener::WeightVectorPtr current_weights_ptr(new WeightCubeListener::WeightVector);
+    volume->downloadWeights(*current_weights_ptr);
+
+    if (weight_cube_listener_)
+      {
+      PCL_INFO("shift: calling weight listener...\n");
+      Eigen::Vector3i nb_voxels(buffer_.voxels_size.x,buffer_.voxels_size.y,buffer_.voxels_size.z);
+      Eigen::Vector3i cyclical_shifted_origin(buffer_.origin_GRID.x,buffer_.origin_GRID.y,buffer_.origin_GRID.z);
+      Eigen::Vector3i grid_origin(buffer_.origin_GRID_global.x,buffer_.origin_GRID_global.y,buffer_.origin_GRID_global.z);
+      Eigen::Vector3f cube_size(buffer_.volume_size.x,buffer_.volume_size.y,buffer_.volume_size.z);
+      weight_cube_listener_->onNewCube(current_weights_ptr,cube_size,nb_voxels,cyclical_shifted_origin,grid_origin);
+      PCL_INFO("shift: done.\n");
+      }
+  }
+
   // transform the slice from local to global coordinates
   Eigen::Affine3f global_cloud_transformation;
   global_cloud_transformation.translation ()[0] = buffer_.origin_GRID_global.x;
diff --git a/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/kinfu.h b/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/kinfu.h
index aa773a6..23f4b40 100644
--- a/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/kinfu.h
+++ b/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/kinfu.h
@@ -248,6 +248,21 @@ namespace pcl
            *   than the previous one.
            */
           pcl::PointCloud<pcl::PointXYZI>::Ptr extractWorldAndReset();
+
+          void syncKnownPoints();
+
+          void setWeightCubeListener(CyclicalBuffer::WeightCubeListener::Ptr listener)
+          {
+            cyclical_.setWeightCubeListener(listener);
+          }
+
+          /**
+           * @brief enables known points extraction
+           */
+          void setExtractKnownPoints(bool e)
+          {
+            cyclical_.setExtractKnownPoints(e);
+          }
           
           /** \brief Returns true if ICP is currently lost */
           bool
diff --git a/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/tsdf_volume.h b/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/tsdf_volume.h
index c21630d..3acd05c 100644
--- a/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/tsdf_volume.h
+++ b/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/tsdf_volume.h
@@ -217,6 +217,9 @@ EIGEN_MAKE_ALIGNED_OPERATOR_NEW
           */
         void
         downloadTsdfAndWeights (std::vector<float>& tsdf, std::vector<short>& weights) const;
+
+        void
+        downloadWeights(std::vector<short>& weights) const;
         
         /** \brief Downloads TSDF volume and according voxel weights from GPU memory to local CPU buffers*/
         void
diff --git a/gpu/kinfu_large_scale/src/kinfu.cpp b/gpu/kinfu_large_scale/src/kinfu.cpp
index 7d12216..9aff182 100644
--- a/gpu/kinfu_large_scale/src/kinfu.cpp
+++ b/gpu/kinfu_large_scale/src/kinfu.cpp
@@ -206,6 +206,13 @@ pcl::gpu::kinfuLS::KinfuTracker::extractAndSaveWorld ()
   
 }
 
+void pcl::gpu::kinfuLS::KinfuTracker::syncKnownPoints()
+  {
+  //extract current volume
+  cyclical_.checkForShift(tsdf_volume_, getCameraPose (), 0.6 * volume_size_, true, true, true);
+    // this will force the extraction of the whole cube.
+  }
+
 pcl::PointCloud<pcl::PointXYZI>::Ptr pcl::gpu::kinfuLS::KinfuTracker::extractWorld()
 {
   //extract current volume to world model
diff --git a/gpu/kinfu_large_scale/src/tsdf_volume.cpp b/gpu/kinfu_large_scale/src/tsdf_volume.cpp
index 6198a4b..8c4eae0 100644
--- a/gpu/kinfu_large_scale/src/tsdf_volume.cpp
+++ b/gpu/kinfu_large_scale/src/tsdf_volume.cpp
@@ -427,6 +427,23 @@ pcl::gpu::kinfuLS::TsdfVolume::downloadTsdfAndWeights (std::vector<float>& tsdf,
   }
 }
 
+void
+pcl::gpu::kinfuLS::TsdfVolume::downloadWeights(std::vector<short>& weights) const
+{
+  int volumeSize = volume_.cols() * volume_.rows();
+  std::vector<float> tsdf;
+  tsdf.resize (volumeSize);
+  weights.resize (volumeSize);
+  volume_.download(&tsdf[0], volume_.cols() * sizeof(int));
+
+  #pragma omp parallel for
+  for(int i = 0; i < (int) tsdf.size(); ++i)
+  {
+    short2 elem = *reinterpret_cast<short2*>(&tsdf[i]);
+    weights[i] = (short)(elem.y);
+  }
+}
+
 
 void
 pcl::gpu::kinfuLS::TsdfVolume::downloadTsdfAndWeightsLocal () const
