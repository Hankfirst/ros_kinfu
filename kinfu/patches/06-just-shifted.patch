diff --git a/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/kinfu.h b/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/kinfu.h
index 28cb3c2..666726a 100644
--- a/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/kinfu.h
+++ b/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/kinfu.h
@@ -500,6 +500,8 @@ namespace pcl
 
           /** \brief True or false depending on if there was a shift in the last pose update */
           bool has_shifted_;
+
+          bool just_shifted_;
           
         public:
           EIGEN_MAKE_ALIGNED_OPERATOR_NEW
diff --git a/gpu/kinfu_large_scale/src/kinfu.cpp b/gpu/kinfu_large_scale/src/kinfu.cpp
index 0f7a67e..7cf23b2 100644
--- a/gpu/kinfu_large_scale/src/kinfu.cpp
+++ b/gpu/kinfu_large_scale/src/kinfu.cpp
@@ -120,6 +120,7 @@ pcl::gpu::kinfuLS::KinfuTracker::KinfuTracker (const Eigen::Vector3f &volume_siz
   last_estimated_rotation_= Eigen::Matrix3f::Identity ();
   last_estimated_translation_= volume_size * 0.5f - Vector3f (0, 0, volume_size (2) / 2 * 1.2f);
 
+  just_shifted_ = false;
 }
 
 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@@ -209,15 +210,23 @@ pcl::gpu::kinfuLS::KinfuTracker::extractAndSaveWorld ()
 void pcl::gpu::kinfuLS::KinfuTracker::syncKnownPoints()
   {
   //extract current volume
-  cyclical_.checkForShift(tsdf_volume_, getCameraPose (), 0.6 * volume_size_, true, true, true);
+  if (!just_shifted_)
+    cyclical_.checkForShift(tsdf_volume_, getCameraPose (), 0.6 * volume_size_, true, true, true);
+  else
+    PCL_INFO("checkForShift skipped: already done.");
     // this will force the extraction of the whole cube.
+  just_shifted_ = true;
   }
 
 pcl::PointCloud<pcl::PointXYZI>::Ptr pcl::gpu::kinfuLS::KinfuTracker::extractWorld()
 {
   //extract current volume to world model
   PCL_INFO("Extracting current volume...");
-  cyclical_.checkForShift(tsdf_volume_, getCameraPose (), 0.6 * volume_size_, true, true, true); // this will force the extraction of the whole cube.
+  if (!just_shifted_)
+    cyclical_.checkForShift(tsdf_volume_, getCameraPose (), 0.6 * volume_size_, true, true, true); // this will force the extraction of the whole cube.
+  else
+    PCL_INFO("checkForShift skipped: already done.");
+  just_shifted_ = true;
   PCL_INFO("Done\n");
 
   pcl::PointCloud<pcl::PointXYZI>::Ptr result =
@@ -288,6 +297,8 @@ pcl::gpu::kinfuLS::KinfuTracker::reset ()
   
   lost_=false;
   has_shifted_=false;
+
+  just_shifted_ = false;
 }
 
 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@@ -314,6 +325,8 @@ pcl::gpu::kinfuLS::KinfuTracker::clearSphere(const Eigen::Vector3f & center,floa
   // a sphere must be cleared in the downloaded world model
   // this also updates the knowledge octree
   cyclical_.clearSphere(expanded_center,expanded_radius);
+
+  just_shifted_ = false;
 }
 
 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@@ -631,6 +644,8 @@ pcl::gpu::kinfuLS::KinfuTracker::performPairWiseICP(const Intr cam_intrinsics, M
 bool
 pcl::gpu::kinfuLS::KinfuTracker::operator() (const DepthMap& depth_raw,const THint & hint)
 { 
+  just_shifted_ = false;
+
   // Intrisics of the camera
   Intr intr (fx_, fy_, cx_, cy_);
   
@@ -916,6 +931,8 @@ pcl::gpu::kinfuLS::KinfuTracker::initColorIntegration(int max_weight)
 bool 
 pcl::gpu::kinfuLS::KinfuTracker::operator() (const DepthMap& depth, const View& colors, const THint & hint)
 { 
+  just_shifted_ = false;
+
   bool res = (*this)(depth,hint);
 
   if (res && color_volume_)
