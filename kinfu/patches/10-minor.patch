diff --git a/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/kinfu.h b/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/kinfu.h
index d73465d..ddfc64c 100644
--- a/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/kinfu.h
+++ b/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/kinfu.h
@@ -255,6 +255,18 @@ namespace pcl
           {
             return (cyclical_.getBuffer ());
           }
+
+          /** \brief Returns reference to the cyclical buffer
+            */
+          CyclicalBuffer & getCyclicalBuffer()
+          {
+            return cyclical_;
+          }
+
+
+          /** \brief Returns voxel size
+            */
+          float getVoxelSize() const;
           
           /** \brief Extract the world and save it.
             */
@@ -311,6 +323,9 @@ namespace pcl
             return (has_shifted_);
           }
 
+          void
+          getDepthIntrinsics (float & fx,float & fy, float & cx, float & cy) const {fx = fx_; fy = fy_; cx = cx_; cy = cy_; }
+
         private:
           
           /** \brief Allocates all GPU internal buffers.
diff --git a/gpu/kinfu_large_scale/src/cuda/extract.cu b/gpu/kinfu_large_scale/src/cuda/extract.cu
index 94acb21..a541b46 100644
--- a/gpu/kinfu_large_scale/src/cuda/extract.cu
+++ b/gpu/kinfu_large_scale/src/cuda/extract.cu
@@ -339,6 +339,12 @@ namespace pcl
               }
               int old_global_count = cta_buffer[0];
 
+              // Sanity check to make sure our output_xyz buffer is not full already
+              bool full = (old_global_count + total_warp) >= output_xyz.size;
+
+              if (full)
+                break;
+
               // Perform compaction (dump all current crossings)
               for (int l = 0; l < local_count; ++l)
               {
@@ -358,12 +364,6 @@ namespace pcl
                 float i = storage_I[storage_index + idx];
                 store_point_intensity (x, y, z, i, output_xyz.data, output_intensity.data, offset_storage);
               }
-
-              // Sanity check to make sure our output_xyz buffer is not full already
-              bool full = (old_global_count + total_warp) >= output_xyz.size;
-
-              if (full)
-                break;
             }
 
             } /* for(int z = 0; z < VOLUME_Z - 1; ++z) */
@@ -525,19 +525,19 @@ namespace pcl
         minBounds.z -= buffer->origin_GRID.z;
         maxBounds.z -= buffer->origin_GRID.z;
 
-        if (minBounds.x < 0) // We are shifting Left
+        while (minBounds.x < 0) // We are shifting Left
         {
           minBounds.x += buffer->voxels_size.x;
           maxBounds.x += (buffer->voxels_size.x);
         }
 
-        if (minBounds.y < 0) // We are shifting up
+        while (minBounds.y < 0) // We are shifting up
         {
           minBounds.y += buffer->voxels_size.y;
           maxBounds.y += (buffer->voxels_size.y);
         }
 
-        if (minBounds.z < 0) // We are shifting back
+        while (minBounds.z < 0) // We are shifting back
         {
           minBounds.z += buffer->voxels_size.z;
           maxBounds.z += buffer->voxels_size.z;
diff --git a/gpu/kinfu_large_scale/src/kinfu.cpp b/gpu/kinfu_large_scale/src/kinfu.cpp
index 9e841a0..dcc1692 100644
--- a/gpu/kinfu_large_scale/src/kinfu.cpp
+++ b/gpu/kinfu_large_scale/src/kinfu.cpp
@@ -222,7 +222,7 @@ void pcl::gpu::kinfuLS::KinfuTracker::syncKnownPoints()
   if (!just_shifted_)
     cyclical_.checkForShift(tsdf_volume_, getCameraPose (), 0.6 * volume_size_, true, true, true);
   else
-    PCL_INFO("checkForShift skipped: already done.");
+    PCL_INFO("checkForShift skipped: already done.\n");
     // this will force the extraction of the whole cube.
   just_shifted_ = true;
   }
@@ -374,6 +374,13 @@ pcl::gpu::kinfuLS::KinfuTracker::clearBBox(const Eigen::Vector3f & min,const Eig
 }
 
 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+
+float pcl::gpu::kinfuLS::KinfuTracker::getVoxelSize() const
+{
+  return volume_size_ / pcl::device::kinfuLS::VOLUME_X;
+}
+
+///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 void
 pcl::gpu::kinfuLS::KinfuTracker::allocateBufffers (int rows, int cols)
 {    
