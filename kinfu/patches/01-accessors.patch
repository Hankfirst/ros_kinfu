diff --git a/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/impl/standalone_marching_cubes.hpp b/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/impl/standalone_marching_cubes.hpp
index 5b76375..04cdbc1 100644
--- a/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/impl/standalone_marching_cubes.hpp
+++ b/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/impl/standalone_marching_cubes.hpp
@@ -155,6 +155,65 @@ pcl::gpu::kinfuLS::StandaloneMarchingCubes<PointT>::getMeshesFromTSDFVector (con
   return;
 }
 
+template <typename PointT> void
+pcl::gpu::kinfuLS::StandaloneMarchingCubes<PointT>::getMeshesFromTSDFVectorMemory(
+  const std::vector<PointCloudPtr> &tsdf_clouds,const std::vector<Eigen::Vector3f,
+  Eigen::aligned_allocator<Eigen::Vector3f> > &tsdf_offsets,
+  std::vector<MeshPtr> & meshes_vector)
+{
+  int max_iterations = std::min( tsdf_clouds.size (), tsdf_offsets.size () ); //Safety check
+  PCL_INFO ("There are %d cubes to be processed \n", max_iterations);
+  float cell_size = volume_size_ / voxels_x_;
+
+  int mesh_counter = 0;
+
+  for(int i = 0; i < max_iterations; ++i)
+  {
+    PCL_INFO ("Processing cube number %d\n", i);
+
+    //Making cloud local
+    Eigen::Affine3f cloud_transform;
+
+    float originX = (tsdf_offsets[i]).x();
+    float originY = (tsdf_offsets[i]).y();
+    float originZ = (tsdf_offsets[i]).z();
+
+    cloud_transform.linear ().setIdentity ();
+    cloud_transform.translation ()[0] = -originX;
+    cloud_transform.translation ()[1] = -originY;
+    cloud_transform.translation ()[2] = -originZ;
+
+    transformPointCloud (*tsdf_clouds[i], *tsdf_clouds[i], cloud_transform);
+
+    //Get mesh
+    MeshPtr tmp = getMeshFromTSDFCloud (*tsdf_clouds[i]);
+
+    if(tmp != 0)
+    {
+       meshes_vector.push_back (tmp);
+       mesh_counter++;
+    }
+    else
+    {
+      PCL_INFO ("This cloud returned no faces, we skip it!\n");
+      continue;
+    }
+
+    //Making cloud global
+    cloud_transform.translation ()[0] = originX * cell_size;
+    cloud_transform.translation ()[1] = originY * cell_size;
+    cloud_transform.translation ()[2] = originZ * cell_size;
+
+    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_tmp_ptr (new pcl::PointCloud<pcl::PointXYZ>);
+    fromPCLPointCloud2 ( (meshes_vector.back () )->cloud, *cloud_tmp_ptr);
+
+    transformPointCloud (*cloud_tmp_ptr, *cloud_tmp_ptr, cloud_transform);
+
+    toPCLPointCloud2 (*cloud_tmp_ptr, (meshes_vector.back () )->cloud);
+  }
+  return;
+}
+
 ///////////////////////////////////////////////////////////////////////////////
 
 template <typename PointT> pcl::gpu::kinfuLS::TsdfVolume::Ptr
diff --git a/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/kinfu.h b/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/kinfu.h
index cdde4ae..6b47693 100644
--- a/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/kinfu.h
+++ b/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/kinfu.h
@@ -216,6 +216,16 @@ namespace pcl
             */
           void
           extractAndSaveWorld ();
+
+          /** \brief Returns a copy of the current world. Computationally expensive.
+           */
+          pcl::PointCloud<pcl::PointXYZI>::Ptr extractWorld();
+
+          /**
+           * \brief Returns the current world and resets the tracker. Less computationally expensive
+           *   than the previous one.
+           */
+          pcl::PointCloud<pcl::PointXYZI>::Ptr extractWorldAndReset();
           
           /** \brief Returns true if ICP is currently lost */
           bool
diff --git a/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/standalone_marching_cubes.h b/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/standalone_marching_cubes.h
index 8e42e3c..306e462 100644
--- a/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/standalone_marching_cubes.h
+++ b/gpu/kinfu_large_scale/include/pcl/gpu/kinfu_large_scale/standalone_marching_cubes.h
@@ -103,6 +103,11 @@ namespace pcl
         */
       void
       getMeshesFromTSDFVector (const std::vector<PointCloudPtr> &tsdf_clouds, const std::vector<Eigen::Vector3f, Eigen::aligned_allocator<Eigen::Vector3f> > &tsdf_offsets);
+
+      void
+      getMeshesFromTSDFVectorMemory(const std::vector<PointCloudPtr> &tsdf_clouds,
+        const std::vector<Eigen::Vector3f, Eigen::aligned_allocator<Eigen::Vector3f> > &tsdf_offsets,
+        std::vector<MeshPtr> & meshes_vector);
       
       /** \brief Returns the associated Tsdf Volume buffer in GPU 
         * \return pointer to the Tsdf Volume buffer in GPU
diff --git a/gpu/kinfu_large_scale/src/kinfu.cpp b/gpu/kinfu_large_scale/src/kinfu.cpp
index 3351425..30ff3fb 100644
--- a/gpu/kinfu_large_scale/src/kinfu.cpp
+++ b/gpu/kinfu_large_scale/src/kinfu.cpp
@@ -206,6 +206,36 @@ pcl::gpu::kinfuLS::KinfuTracker::extractAndSaveWorld ()
   
 }
 
+pcl::PointCloud<pcl::PointXYZI>::Ptr pcl::gpu::kinfuLS::KinfuTracker::extractWorld()
+{
+  //extract current volume to world model
+  PCL_INFO("Extracting current volume...");
+  cyclical_.checkForShift(tsdf_volume_, getCameraPose (), 0.6 * volume_size_, true, true, true); // this will force the extraction of the whole cube.
+  PCL_INFO("Done\n");
+
+  pcl::PointCloud<pcl::PointXYZI>::Ptr result =
+    pcl::PointCloud<pcl::PointXYZI>::Ptr(new pcl::PointCloud<pcl::PointXYZI>(*(cyclical_.getWorldModel ()->getWorld ())));
+
+  return result;
+}
+
+pcl::PointCloud<pcl::PointXYZI>::Ptr pcl::gpu::kinfuLS::KinfuTracker::extractWorldAndReset()
+{
+  //extract current volume to world model
+  PCL_INFO("Extracting current volume...");
+  cyclical_.checkForShift(tsdf_volume_, getCameraPose (), 0.6 * volume_size_, true, true, true); // this will force the extraction of the whole cube.
+  PCL_INFO("Done\n");
+
+  pcl::PointCloud<pcl::PointXYZI>::Ptr result =
+    pcl::PointCloud<pcl::PointXYZI>::Ptr(new pcl::PointCloud<pcl::PointXYZI>());
+
+  result->swap(*(cyclical_.getWorldModel ()->getWorld ()));
+
+  reset();
+
+  return result;
+}
+
 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 void
 pcl::gpu::kinfuLS::KinfuTracker::reset ()
